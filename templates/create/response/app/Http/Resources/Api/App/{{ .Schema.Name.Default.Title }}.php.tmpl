<?php

declare(strict_types=1);

namespace App\Http\Resources\Api\App;

use App\Http\Resources\Resource;
{{- if not .HasStatusResponse }}
{{- if .IsList }}
use App\Dto\CollectionWithCount;
{{- else }}
use App\Dto\{{ .Schema.Name.Singular.Title }} as {{ .Schema.Name.Singular.Title }}Dto;
{{- end }}
{{- else }}
use App\Dto\Status as StatusDto;
{{- end }}
use Illuminate\Contracts\Support\Arrayable;
use Illuminate\Http\Request;

class {{ .Schema.Name.Default.Title }} extends Resource
{
    protected array $columns = [
{{- range .Schema.Properties}}
        '{{ .Name.Original }}' => {{ if eq .Type "array" }}[]{{ else }}''{{ end }},
{{- end}}
    ];

    /**
     * {{ .Schema.Name.Default.Title }} constructor.
     *
     * @param mixed $resource
     */
{{- if not .HasStatusResponse }}
{{- if not .IsList }}
    public function __construct({{ .Schema.Name.Singular.Title }}Dto $resource)
{{- else }}
    public function __construct(CollectionWithCount $resource)
{{- end }}
{{- else }}
    public function __construct(StatusDto $resource)
{{- end }}
    {
        parent::__construct($resource);
    }

    /**
     * Transform the resource into an array.
     *
     * @param Request $request
     */
    public function toArray($request): array|\JsonSerializable|Arrayable
    {
{{- if .IsList }}
        $data = [];
        foreach ($this->resource->collection as $dto) {
            $data[] = new {{ .Schema.Name.Singular.Title }}($dto);
        }

        return [
            'data' => $data,
            'count' => $this->resource->count,
        ];
{{- else }}
        $result = [
{{- range .Schema.Properties}}
            '{{ .Name.Original }}' => $this->resource->{{ .Name.Default.Camel }},
{{- end }}
        ];
        return $result;
{{- end }}
    }
}
