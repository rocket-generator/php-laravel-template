<?php

namespace App\Models;

{{- if eq .PrimaryKeyDataType "uuid" }}
use Illuminate\Database\Eloquent\Concerns\HasUuids;
{{- end }}
use Illuminate\Database\Eloquent\Factories\HasFactory;
{{- if .UseSoftDelete }}
use Illuminate\Database\Eloquent\SoftDeletes;
{{- end }}
{{- if .Authenticatable }}
use PHPOpenSourceSaver\JWTAuth\Contracts\JWTSubject;
{{- end }}

{{- if .Authenticatable }}
class {{ .Name.Singular.Title }} extends AuthenticatableBase implements JWTSubject
{{- else }}
class {{ .Name.Singular.Title }} extends Base
{{- end }}
{
    use HasFactory;
{{- if eq .PrimaryKeyDataType "uuid" }}
    use HasUuids;
{{- end }}
{{- if .UseSoftDelete }}
    use SoftDeletes;
{{- end }}

    protected $table = '{{ .Name.Original }}';

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
{{- range .Columns}}
{{- if not .Primary }}
{{- if not .IsSystemUseColumn }}
        '{{ .Name.Original }}',
{{- end }}
{{- end }}
{{- end }}
    ];

{{- if eq .PrimaryKeyDataType "uuid" }}
    protected $casts = [
        'id' => 'string',
    ];
{{- end }}

    protected $primaryKey = "{{ .PrimaryKeyName }}";

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
    ];

{{- if .Authenticatable }}
    /**
     * Get the identifier that will be stored in the subject claim of the JWT.
     */
    public function getJWTIdentifier(): mixed
    {
        return $this->getKey();
    }

    /**
     * Return a key value array, containing any custom claims to be added to the JWT.
     */
    public function getJWTCustomClaims(): array
    {
        return [];
    }
{{- end }}

{{- range .Relations}}
{{- if eq .RelationType "belongsTo"}}
    public function {{ .Name.Singular.Camel }}()
    {
        return $this->belongsTo({{ .Entity.Name.Singular.Title }}::class,
            '{{ .ForeignKey.Original }}',
            '{{ .OwnerKey.Original }}'
        );
    }
{{- end}}
{{- if eq .RelationType "belongsToMany"}}
    public function {{ .Name.Plural.Camel }}()
    {
        return $this->belongsToMany({{ .Entity.Name.Singular.Title }}::class, '{{ .OwnerKey.Original }}', '{{ .ForeignKey.Original }}', '??RELATION_TABLE??');
    }
{{- end}}
{{- if eq .RelationType "hasMany"}}
    public function {{ .Name.Plural.Camel }}()
    {
        return $this->hasMany({{ .Entity.Name.Singular.Title }}::class, '{{ .ForeignKey.Original }}', '{{ .OwnerKey.Original }}');
    }
{{- end}}
{{- if eq .RelationType "hasOne"}}
    public function {{ .Name.Singular.Camel }}()
    {
        return $this->hasOne({{ .Entity.Name.Singular.Title }}::class, '{{ .ForeignKey.Original }}', '{{ .OwnerKey.Original }}');
    }
{{- end}}
{{- end }}
}
