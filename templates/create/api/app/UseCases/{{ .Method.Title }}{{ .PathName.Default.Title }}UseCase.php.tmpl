<?php

declare(strict_types=1);

namespace App\UseCases;

use App\Contracts\UseCases\{{ .Method.Title }}{{ .PathName.Default.Title }}UseCaseInterface;
use App\Contracts\Services\UserServiceInterface;
{{- if and (ne .TargetModel nil) (ne .TargetModel.Singular.Title "User") }}
use App\Contracts\Services\{{ .TargetModel.Singular.Title }}ServiceInterface;
{{- end }}
use App\Exceptions\Services\ClientSideException;
use App\Exceptions\Services\ExternalServiceException;
use App\Exceptions\Services\ServerSideException;
{{- if eq .RequestType "crud" }}
{{- if eq .RequestSubType "index" }}
use App\Dto\CollectionWithCount;
{{- else if eq .RequestSubType "get" }}
use App\Dto\{{ .SuccessResponse.Schema.Name.Singular.Title }};
{{- else if eq .RequestSubType "create" }}
use App\Dto\{{ .SuccessResponse.Schema.Name.Singular.Title }};
{{- else if eq .RequestSubType "update" }}
use App\Dto\{{ .SuccessResponse.Schema.Name.Singular.Title }};
{{- end }}
{{- else }}
{{- if .HasStatusResponse }}
{{- else }}
{{- if ne .TargetModel nil }}
use App\Dto\{{ .TargetModel.Singular.Title }};
{{- else }}
{{- end }}
{{- end }}
{{- end }}

class {{ .Method.Title }}{{ .PathName.Default.Title }}UseCase extends BaseUseCase implements {{ .Method.Title }}{{ .PathName.Default.Title }}UseCaseInterface
{
    protected UserServiceInterface $userService;

{{- if and (ne .TargetModel nil) (ne .TargetModel.Singular.Title "User") }}
    protected {{ .TargetModel.Singular.Title }}ServiceInterface ${{ .TargetModel.Singular.Camel }}Service;

    public function __construct(
        UserServiceInterface $userService,
        {{ .TargetModel.Singular.Title }}ServiceInterface  ${{ .TargetModel.Singular.Camel }}Service
    ) {
        $this->userService = $userService;
        $this->{{ .TargetModel.Singular.Camel }}Service = ${{ .TargetModel.Singular.Camel }}Service;
    }
{{- else }}
    public function __construct(
        UserServiceInterface $userService,
    ) {
        $this->userService = $userService;
    }
{{- end }}

    /**
     * @throws ClientSideException
     * @throws ExternalServiceException
     * @throws ServerSideException
     */
{{- if and (eq .RequestType "crud") (ne .TargetModel nil) }}
{{- if eq .RequestSubType "index" }}
    public function handle(
{{- range .Parameters }}
{{- if eq .In "path" }}
                string ${{ .Name.Default.Camel }},
{{- end }}
{{- end }}
                int $offset, int $limit, string $order, string $direction, array $filter = []): CollectionWithCount {
        $user = $this->userService->getAuthUser();
        ${{ .TargetModel.Plural.Camel }} = $this->{{ .TargetModel.Singular.Camel }}Service->get{{ .TargetModel.Plural.Title }}($offset, $limit, $order, $direction, $filter);
        $count = $this->{{ .TargetModel.Singular.Camel }}Service->count{{ .TargetModel.Plural.Title }}($filter);

        return new CollectionWithCount(${{ .TargetModel.Plural.Camel }}, $count);
    }
{{- else if eq .RequestSubType "get" }}
    public function handle(
{{- range .Parameters }}
{{- if eq .In "path" }}
                string ${{ .Name.Default.Camel }},
{{- end }}
{{- end }}        
    ): ?{{ .SuccessResponse.Schema.Name.Singular.Title }} {
        $user = $this->userService->getAuthUser();
        ${{ .TargetModel.Plural.Camel }} = $this->{{ .TargetModel.Singular.Camel }}Service->find{{ .TargetModel.Singular.Title }}ById(
{{- range .Parameters }}
{{- if eq .In "path" }}
                ${{ .Name.Default.Camel }},
{{- end }}
{{- end }}         
        );
        if (empty(${{ .TargetModel.Plural.Camel }})) {
            throw new ClientSideException('{{ .TargetModel.Plural.Title }} not found', 404);
        }

        return ${{ .TargetModel.Plural.Camel }};
    }
{{- else if eq .RequestSubType "create" }}
    public function handle(
{{- range .Parameters }}
{{- if eq .In "path" }}
                string ${{ .Name.Default.Camel }},
{{- end }}
{{- end }}
                array $data): ?{{ .SuccessResponse.Schema.Name.Singular.Title }} {
        $user = $this->userService->getAuthUser();
        return $this->{{ .TargetModel.Singular.Camel }}Service->create{{ .TargetModel.Singular.Title }}($data);
    }
{{- else if eq .RequestSubType "update" }}
    public function handle(
{{- range .Parameters }}
{{- if eq .In "path" }}
                string ${{ .Name.Default.Camel }},
{{- end }}
{{- end }}
                array $data): ?{{ .SuccessResponse.Schema.Name.Singular.Title }} {
        $user = $this->userService->getAuthUser();
        return $this->{{ .TargetModel.Singular.Camel }}Service->update{{ .TargetModel.Singular.Title }}(
{{- range .Parameters }}
{{- if eq .In "path" }}
                ${{ .Name.Default.Camel }},
{{- end }}
{{- end }}   
                $data
        );
    }
{{- else if eq .RequestSubType "delete" }}
    public function handle(
{{- range .Parameters }}
{{- if eq .In "path" }}
                string ${{ .Name.Default.Camel }},
{{- end }}
{{- end }}        
    ): bool {
        $user = $this->userService->getAuthUser();
        return $this->{{ .TargetModel.Singular.Camel }}Service->delete{{ .TargetModel.Singular.Title }}(
{{- range .Parameters }}
{{- if eq .In "path" }}
                ${{ .Name.Default.Camel }},
{{- end }}
{{- end }}
        );
    }
{{- end }}
{{- else }}
    public function handle(
{{- range .Parameters }}
{{- if eq .In "path" }}
                string ${{ .Name.Default.Camel }},
{{- end }}
{{- end }}
    ): 
{{- if .HasStatusResponse }}
        bool
{{- else }}
{{- if ne .TargetModel nil }}
        ?{{ .TargetModel.Singular.Title }}
{{- else }}
        bool
{{- end }}
{{- end }}
    {
        $user = $this->userService->getAuthUser();
        // [TODO] Need to implement this use case
{{- if .HasStatusResponse }}
        return true;
{{- else }}
{{- if ne .TargetModel nil }}
        return new {{ .TargetModel.Singular.Title }}();
{{- else }}
        return true;
{{- end }}
{{- end }}
    }
{{- end }}
}
