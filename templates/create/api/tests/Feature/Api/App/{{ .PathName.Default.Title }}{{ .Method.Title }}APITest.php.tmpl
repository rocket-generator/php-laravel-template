<?php

declare(strict_types=1);

namespace Tests\Feature\Api\App;

{{- if ne .RequestSchema nil }}
use App\Http\Requests\Api\App\{{ .RequestSchemaName.Default.Title }};
{{- end }}
use App\Http\Resources\Api\App\{{ .SuccessResponse.Schema.Name.Default.Title }};
use Illuminate\Support\Facades\Http;
use Tests\Feature\Api\App\TestCase;

/**
 * @internal
 *
 * @coversNothing
 */
final class {{ .PathName.Default.Title }}{{ .Method.Title }}APITest extends TestCase
{
    public function testApiExecuteActionSuccess(): void
    {
        Http::fake();

        $token = $this->getAuthToken();

{{- if ne .TargetModel nil }}
        /** @var \App\Models\{{ .TargetModel.Singular.Title }} $model */
        $model = \App\Models\{{ .TargetModel.Singular.Title }}::factory()->create();
{{- end }}

{{- if eq .RequestType "crud" }}
{{- if eq .RequestSubType "index" }}
        $response = $this->get(
            route('app.{{ .PathName.Default.Snake }}.{{ .Method.Snake }}'),
            [
                'Authorization' => 'bearer '.$token,
            ]
        );
{{- else if eq .RequestSubType "get" }}
        $response = $this->get(
            route('app.{{ .PathName.Default.Snake }}.{{ .Method.Snake }}', ['id' => $model->id]),
            [
                'Authorization' => 'bearer '.$token,
            ]
        );
{{- else if eq .RequestSubType "create" }}
        $data = \App\Models\{{ .TargetModel.Singular.Title }}::factory()->make();
        $response = $this->postJson(
            route('app.{{ .PathName.Default.Snake }}.{{ .Method.Snake }}', ['id' => $model->id]),
            $data->toArray(),
            [
                'Authorization' => 'bearer '.$token,
            ]
        );
{{- else if eq .RequestSubType "update" }}
        $data = \App\Models\{{ .TargetModel.Singular.Title }}::factory()->make();
        $response = $this->putJson(
            route('app.{{ .PathName.Default.Snake }}.{{ .Method.Snake }}', ['id' => $model->id]),
            $data->toArray(),
            [
                'Authorization' => 'bearer '.$token,
            ]
        );
{{- else if eq .RequestSubType "delete" }}
        $response = $this->delete(
            route('app.{{ .PathName.Default.Snake }}.{{ .Method.Snake }}', ['id' => $model->id]),
            [
            ],
            [
                'Authorization' => 'bearer '.$token,
            ]
        );
{{- end }}
{{- else }}
        $response = $this->{{ .Method.Snake }}Json(
            route('app.{{ .PathName.Default.Snake }}.{{ .Method.Snake }}'),
{{- if ne .Method.Snake "get" }}
            [
            ],
{{- end }}
            [
                'Authorization' => 'bearer '.$token,
            ]
        );
{{- end }}
        $response->assertStatus({{ .SuccessResponse.StatusCode }});
    }
}
