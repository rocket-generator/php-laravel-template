<?php

declare(strict_types=1);

namespace App\Http\Controllers\Api\App;

use App\Contracts\UseCases\{{ .Method.Title }}{{ .PathName.Default.Title }}UseCaseInterface;
use App\Contracts\Services\{{ .PathName.Singular.Title }}ServiceInterface;
use App\Exceptions\Api\App\APIErrorException;
use App\Http\Controllers\Controller;
{{- if eq .RequestSchemaName.Default.Title "" }}
use App\Http\Requests\Api\App\Request;
{{- else }}
use App\Http\Requests\Api\App\{{ .RequestSchemaName.Default.Title }};
{{- end }}
use App\Http\Resources\Api\App\{{ .SuccessResponse.Schema.Name.Default.Title }};

class {{ .PathName.Default.Title }}{{ .Method.Title }}Controller extends Controller
{
    protected {{ .Method.Title }}{{ .PathName.Default.Title }}UseCaseInterface $useCase;

    public function __construct({{ .Method.Title }}{{ .PathName.Default.Title }}UseCaseInterface $useCase)
    {
        $this->useCase = $useCase;
    }

    /**
     * @throws APIErrorException
     */
    public function __invoke(
{{- range .Parameters }}
{{- if eq .In "path" }}
        {{ .ObjectType }} ${{ .Name.Default.Camel }},
{{- end }}
{{- end }}
{{- if eq .RequestSchemaName.Default.Title "" }}
        Request $request
{{- else }}
        {{ .RequestSchemaName.Default.Title }} $request
{{- end }}
    ): {{ .SuccessResponse.Schema.Name.Default.Title }}
    {
{{- if eq .RequestType "crud" }}
{{- if eq .Method.Camel "get" }}
{{- if .SuccessResponse.IsList }}
        $offset = (int) $request->query('_start', 0);
        $end = (int) $request->query('_end', 20);
        $limit = $end - $offset;
        $order = $request->query('_sort', 'id');
        $direction = $request->query('_order', 'asc');

        $collection = $this->useCase->handle($offset, $limit, $order, $direction);

        return new {{ .SuccessResponse.Schema.Name.Default.Title }}($collection);
{{- else }}
        $dto = $this->useCase->handle($id);

        return new {{ .SuccessResponse.Schema.Name.Default.Title }}($dto);
{{- end }}
{{- else if eq .Method.Camel "post" }}
        $data = $request->validated();
        $dto = $this->useCase->handle($data);

        return new {{ .SuccessResponse.Schema.Name.Default.Title }}($dto);
{{- else if eq .Method.Camel "put" }}
        $data = $request->validated();
        $dto = $this->useCase->handle($id, $data);

        return new {{ .SuccessResponse.Schema.Name.Default.Title }}($dto);
{{- else if eq .Method.Camel "delete" }}
        $status = $this->useCase->handle($id);

        return new Status(true);
{{- end }}
{{- else }}
        $success = $this->useCase->handle();
        if (!$success) {
            throw new APIErrorException('something wrong', 400);
        }

        return new {{ .SuccessResponse.Schema.Name.Default.Title }}([]);
{{- end }}
    }
}
