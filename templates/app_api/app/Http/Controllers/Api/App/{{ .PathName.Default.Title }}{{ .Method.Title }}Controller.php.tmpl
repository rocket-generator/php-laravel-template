<?php

declare(strict_types=1);

namespace App\Http\Controllers\Api\App;

use App\Contracts\Services\{{ .PathName.Default.Title }}ServiceInterface;
use App\Exceptions\Api\App\APIErrorException;
use App\Http\Controllers\Controller;
use App\Http\Requests\Api\App\{{ .RequestSchemaName.Default.Title }};
use App\Http\Resources\Api\App\{{ .SuccessResponse.Schema.Name.Default.Title }};

class {{ .PathName.Default.Title }}{{ .Method.Title }}Controller extends Controller
{
    protected {{ .PathName.Default.Title }}ServiceInterface ${{ .PathName.Default.Camel }}Service;

    public function __construct({{ .PathName.Default.Title }}ServiceInterface ${{ .PathName.Default.Camel }}Service)
    {
        $this->{{ .PathName.Default.Camel }}Service = ${{ .PathName.Default.Camel }}Service;
    }

    /**
     * @throws APIErrorException
     */
    public function {{ .Method.Camel }}(
{{- range .Parameters }}
{{- if eq .In "path" }}
        {{ .ObjectType }} ${{ .Name.Default.Camel }},
{{- end }}
{{ end }}
        {{ .RequestSchemaName.Default.Title }} $request
    ): {{ .SuccessResponse.Schema.Name.Default.Title }}
    {
        $data = $this->{{ .PathName.Default.Camel }}Service->exec();
        if($data === null) {
            throw new APIErrorException('Not found', 404);
        }

        return new {{ .SuccessResponse.Schema.Name.Default.Title }}($data);
    }
}
