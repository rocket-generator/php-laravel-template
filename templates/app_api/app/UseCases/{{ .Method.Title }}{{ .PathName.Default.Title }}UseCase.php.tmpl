<?php

declare(strict_types=1);

namespace App\UseCases;

use App\Contracts\UseCases\{{ .Method.Title }}{{ .PathName.Default.Title }}UseCaseInterface;
use App\Contracts\Services\{{ .PathName.Singular.Title }}ServiceInterface;
use App\Exceptions\Services\ClientSideException;
use App\Exceptions\Services\ExternalServiceException;
use App\Exceptions\Services\ServerSideException;
{{- if eq .RequestType "crud" }}
{{- if eq .Method.Camel "get" }}
{{- if .SuccessResponse.IsList }}
use App\Dto\CollectionWithCount;
{{- else }}
use App\Dtos\{{ .SuccessResponse.Schema.Name.Singular.Title }};
{{- end }}
{{- else if eq .Method.Camel "post" }}
use App\Dtos\{{ .SuccessResponse.Schema.Name.Singular.Title }};
{{- else if eq .Method.Camel "put" }}
use App\Dtos\{{ .SuccessResponse.Schema.Name.Singular.Title }};
{{- end }}
{{- end }}

class {{ .Method.Title }}{{ .PathName.Default.Title }}UseCase extends BaseUseCase implements {{ .Method.Title }}{{ .PathName.Default.Title }}UseCaseInterface
{
    protected {{ .PathName.Singular.Title }}ServiceInterface ${{ .PathName.Singular.Camel }}Service;

    public function __construct(
        {{ .PathName.Singular.Title }}ServiceInterface  ${{ .PathName.Singular.Camel }}Service
    ) {
        $this->{{ .PathName.Singular.Camel }}Service = ${{ .PathName.Singular.Camel }}Service;
    }

    /**
     * @throws ClientSideException
     * @throws ExternalServiceException
     * @throws ServerSideException
     */
{{- if eq .RequestType "crud" }}
{{- if eq .Method.Camel "get" }}
{{- if .SuccessResponse.IsList }}
    public function handle(int $offset, int $limit, string $order, string $direction): CollectionWithCount {
        return new CollectionWithCount([], 0);
    }
{{- else }}
    public function handle(string $id): ?{{ .SuccessResponse.Schema.Name.Singular.Title }} {
        return null;
    }
{{- end }}
{{- else if eq .Method.Camel "post" }}
    public function handle(array $data): ?{{ .SuccessResponse.Schema.Name.Singular.Title }} {
        return null;
    }
{{- else if eq .Method.Camel "put" }}
    public function handle(string $id, array $data): ?{{ .SuccessResponse.Schema.Name.Singular.Title }} {
        return null;
    }
{{- else if eq .Method.Camel "delete" }}
    public function handle(string $id): bool {
        return true;
    }{{- end }}
{{- else }}
    public function handle(): bool {
        return true;
    }
{{- end }}
}
